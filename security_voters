Controller :

```

/**
     * @Route("/delete/{id}", name="delete")
     */
    public function delete($id) {


        $entityManager = $this->getDoctrine()->getManager();
        $post = $entityManager->getRepository(Post::class)->find($id);

        $this->denyAccessUnlessGranted('POST_DELETE', $post);


        $entityManager->remove($post);
        $entityManager->flush();

        return $this->redirectToRoute('list');



    }
    
    
    
    
    ======================================================================================
    
    PostVoter.php
    
    
    <?php

namespace App\Security\Voter;

use App\Entity\Post;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;
use Symfony\Component\Security\Core\User\UserInterface;


class PostVoter extends Voter
{
    protected function supports($attribute, $subject)
    {
        // replace with your own logic
        // https://symfony.com/doc/current/security/voters.html
        return in_array($attribute, ['POST_EDIT', 'POST_VIEW' , 'POST_DELETE'])
            && $subject instanceof \App\Entity\Post;
    }

    protected function voteOnAttribute($attribute, $post, TokenInterface $token)
    {
        $user = $token->getUser();
        // if the user is anonymous, do not grant access
        if (!$user instanceof UserInterface) {
            return false;
        }

        // ... (check conditions and return true to grant permission) ...
        switch ($attribute) {
            case 'POST_EDIT':

                // logic to determine if the user can EDIT
                // return true or false
                break;

            case 'POST_DELETE':
                return $post->getUser()->getId() == $user->getId() ;
                
                break ;
            case 'POST_VIEW':
                // logic to determine if the user can VIEW
                // return true or false
                break;
        }

        return false;
    }
}



```
    
